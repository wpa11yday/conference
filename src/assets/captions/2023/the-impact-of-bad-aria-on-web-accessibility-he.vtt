WEBVTT

00:00:01.140 --> 00:00:05.603
אמבר הינדס:
יום הנגישות של וורדפרס 2023.

00:00:05.603 --> 00:00:11.720
ההשפעה של יישום לקוי של ARIA על נגישות באינטרנט - עם הדוברת ראשמי קטאקוואר,

00:00:11.720 --> 00:00:14.100
יועצת נגישות אתרים.

00:00:14.100 --> 00:00:17.710
מצגת זו הוקלטה ב-28 בספטמבר 2023.

00:00:17.710 --> 00:00:22.720
רונאק גנאטרה: ברוכים הבאים ליום
הנגישות של וורדפרס 2023.

00:00:22.720 --> 00:00:27.520
שמי רונאק גנאטרה ואני
מהנדס וורדפרס ב-Multidots.

00:00:28.580 --> 00:00:34.250
תודה שהצטרפתם אלינו למפגש
״ההשפעה של יישום לקוי של ARIA

00:00:34.250 --> 00:00:38.560
על נגישות באינטרנט״
עם ראשמי קטאקוואר.

00:00:38.560 --> 00:00:41.190
ראשמי  מחוייבת ומסורה לנגישות

00:00:41.190 --> 00:00:43.520
ועובדת כיועצת נגישות
אתרים עצמאית.

00:00:43.520 --> 00:00:48.840
היא גם מומחית-מוזמנת
ל-W3C ותורמת באופן פעיל

00:00:48.840 --> 00:00:52.500
לצוות Cognitive and Learning Disabilities Accessibility.

00:00:52.500 --> 00:00:57.200
ראשמי מחוייבת עמוקות
להבטחת הגישה השווה לטכנולוגיה

00:00:57.200 --> 00:00:58.630
לכולם.

00:00:58.630 --> 00:01:02.960
התלהבותה מנגישות
מונעת מאמונתה הבלתי מעורערת

00:01:02.960 --> 00:01:07.250
בכוחה של הטכנולוגיה ליצור
חברה מכילה יותר.

00:01:09.810 --> 00:01:13.410
אנא, אל תהססו להוסיף את
שאלותיכם ב״Zoom-Q&A״

00:01:13.410 --> 00:01:16.360
ואנו נידרש אליהן
בסוף המצגת.

00:01:16.360 --> 00:01:18.800
השתמשו בצ'אט כדי
לתקשר עם משתתפים אחרים.

00:01:20.260 --> 00:01:22.540
עכשיו, אני חושב ש-ראשמי,
הבמה שלך.

00:01:22.540 --> 00:01:23.340
את יכולה להתחיל.

00:01:23.340 --> 00:01:23.870
תודה.

00:01:24.733 --> 00:01:26.140
ראשמי קטאקוואר: שלום לכולם.

00:01:26.140 --> 00:01:28.180
שוב, תודה על ההקדמה הנפלאה

00:01:28.180 --> 00:01:29.710
אז היי, אני ראשמי קטאקוואר.

00:01:30.800 --> 00:01:31.890
אני מהודו.

00:01:31.890 --> 00:01:36.200
אני יועצת נגישות אתרים עצמאית
ומומחית-מוזמנת ב-W3C.

00:01:37.580 --> 00:01:42.710
אני גם תורמת באופן פעיל
לצוות Cognitive and Learning Disabilities Accessibility.

00:01:42.710 --> 00:01:44.020
כחלק מ-W3C.

00:01:48.600 --> 00:01:51.390
ואני גם משמשת כמנהלת
מדיה חברתית בקהילת הלינקדין

00:01:51.390 --> 00:01:53.220
HelloA11y

00:01:53.220 --> 00:01:57.000
אז, ברוכים הבאים
למצגת שלי בנושא ההשפעה של יישום

00:01:57.000 --> 00:01:58.710
לקוי של ARIA על נגישות באינטרנט.

00:02:01.120 --> 00:02:03.690
הרשו לי להתחיל בלתת לכם
הסבר קצר על

00:02:03.690 --> 00:02:04.970
מדוע בחרתי בנושא זה.

00:02:06.000 --> 00:02:09.800
אז במהלך ביקורת נגישות,
גיליתי שהרבה בעיות

00:02:09.800 --> 00:02:14.240
נגישות ושימושיות הופיעו
בעקבות שימוש לקוי ב-ARIA בקוד.

00:02:14.240 --> 00:02:17.410
השימושים השגויים הללו ב-ARIA היוו
אתגרים משמעותיים

00:02:17.410 --> 00:02:22.340
לאנשים המשתמשים בטכנולוגיות מסייעות
כדי לנווט באינטרנט.

00:02:23.780 --> 00:02:28.780
ראוי לציין שמפתחים
משתמשים ב-ARIA מתוך כוונות טובה,

00:02:28.780 --> 00:02:33.180
אך ללא ידע מספיק, הם עלולים
לעשות שימוש לקוי ב-ARIA

00:02:33.180 --> 00:02:35.700
ועלולים ליצור פתרונות בלתי נגישים.

00:02:37.180 --> 00:02:42.100
תקן ARIA הוא כלי אדיר
לשיפור הנגישות לאנשים

00:02:42.100 --> 00:02:45.760
המשתמשים בטכנולוגיות מסייעות -
אם נעשה בו שימוש הולם.

00:02:45.760 --> 00:02:48.210
מצד שני, שימוש לרעה בו
יוצר יותר נזק מתועלת.

00:02:49.320 --> 00:02:51.575
אז היום בעזרת המצגת שלי,

00:02:51.576 --> 00:02:53.020
ודוגמאות מהחיים האמיתיים,

00:02:53.020 --> 00:02:57.850
אסביר כיצד שימוש לרעה בתקן ARIA
יוצר מכשולים עבור המשתמשים

00:02:57.850 --> 00:03:00.630
וכיצד ניתן להסיר את
המכשולים הללו באמצעות ARIA תקני,

00:03:00.630 --> 00:03:01.880
ושיטות עבודה מומלצות.

00:03:03.410 --> 00:03:05.900
אני מבטיחה לכם,
עד סוף המפגש הזה,

00:03:05.900 --> 00:03:10.070
תהיה לכם הבנה טובה
יותר של כל המושגים של ARIA.

00:03:10.070 --> 00:03:12.620
זה גם יעזור לכם
לרכז את המאמצים והכוונות

00:03:12.620 --> 00:03:14.670
לעבר מטרת שיפור
נגישות האינטרנט.

00:03:16.190 --> 00:03:19.950
מעקב אחר שיטות עבודה מומלצות של ARIA
ושימוש בגישה פרואקטיבית

00:03:19.950 --> 00:03:23.570
גם יסייעו להפחית את העומס
על מפתחים ועסקים

00:03:23.570 --> 00:03:25.190
במונחים של זמן, מאמץ וכסף.

00:03:26.960 --> 00:03:29.445
זה גם ישפר את
חוויות המשתמש

00:03:29.446 --> 00:03:31.370
וכן יפחית סיכונים משפטיים.

00:03:33.670 --> 00:03:36.230
אני בטוחה שכולכם בוודאי
מכירים את הציטוט המפורסם

00:03:36.230 --> 00:03:38.900
מהסרט ספיידרמן,
שאומר "עם כוח רב

00:03:38.900 --> 00:03:40.980
באה אחריות גדולה".

00:03:40.980 --> 00:03:43.410
זה נכון גם
למקרים שבהם אנו משתמשים ב-ARIA.

00:03:45.730 --> 00:03:49.050
תקן ARIA נותן לנו כוח
לשפר את הנגישות.

00:03:49.050 --> 00:03:53.210
אז כאשר אנו משתמשים ב-ARIA, האחריות שלנו היא להשתמש בו בצורה נבונה

00:03:54.880 --> 00:03:57.250
כיוון ששימוש שגוי ב-ARIA
יוצר יותר נזק מתועלת.

00:03:59.340 --> 00:04:03.130
ARIA לקוי היא כמו רמפה פגומה
שאינה משרתת את מטרתה.

00:04:05.540 --> 00:04:08.070
דמיינו רמפה שמותקנת
בגובה של 300 מטרים

00:04:08.070 --> 00:04:08.870
ממשטח הנחיתה.

00:04:08.870 --> 00:04:11.740
האם הרמפה הזו באמת
עוזרת למשתמשים עתידיים?

00:04:11.740 --> 00:04:13.150
כמובן שלא.

00:04:13.150 --> 00:04:17.260
אחרי הכל, זה לא נועד לתצוגת תכלית
של גולשי סקייטבורד.

00:04:19.000 --> 00:04:22.980
לאדריכל היו
כוונות טובות בזמן שהוא התקין אותה,

00:04:22.980 --> 00:04:26.334
אך מבלי לפעול בעקבות
ההנחיות המתאימות

00:04:26.335 --> 00:04:28.620
והבנת צרכי המשתמש,

00:04:28.620 --> 00:04:34.660
הוא לא הצליח להבין את כל
צרכי המשתמשים ונכשל

00:04:34.660 --> 00:04:36.410
בלסייע למשתמשים בכיסאות גלגלים.

00:04:36.410 --> 00:04:40.080
באופן דומה, אם מפתחים משתמשים ב-
ARIA מבלי להבין את התקן,

00:04:40.080 --> 00:04:44.100
וליישם אותו בקוד,
הם לא מצליחים לעזור למשתמשים כמתוכנן.

00:04:45.890 --> 00:04:49.600
הנתונים מסקר WebAIM האחרון
גם תומכים בחששותיי.

00:04:50.870 --> 00:04:54.530
נתוני סקר WebAIM Million ל-2023
מלמד, כי השימוש

00:04:54.530 --> 00:04:57.360
בתקן ARIA גדל ב-29% בשנה אחת בלבד.

00:04:58.770 --> 00:05:01.000
וזה גדל בכמעט פי ארבעה

00:05:01.000 --> 00:05:02.560
מאז 2019.

00:05:02.560 --> 00:05:03.980
אז מה הסיבה לדאגה?

00:05:05.270 --> 00:05:07.700
הנקודה המדאיגה
היא שהדו״ח מציין גם

00:05:07.700 --> 00:05:13.160
כי, זוהו 68.6% יותר שגיאות
בדפים עם ARIA.

00:05:14.730 --> 00:05:16.940
 ככל שמשלבים
יותר ARIA בקוד,

00:05:16.940 --> 00:05:18.810
צפויות יותר שגיאות נגישות.

00:05:20.140 --> 00:05:23.750
השורה התחתונה היא,
שאם אתם משתמשים ב-ARIA בצורה לא נכונה

00:05:23.750 --> 00:05:25.720
אתם עלולים להפוך את
האתרים שלך לנגישים פחות.

00:05:26.950 --> 00:05:30.230
אז, למה שלא נבין זאת בעזרת
דוגמה אחת מהחיים האמיתיים?

00:05:34.690 --> 00:05:36.010
בואו נפגוש את בוב.

00:05:36.010 --> 00:05:37.990
[קול קורא מסך]

00:05:40.930 --> 00:05:42.700
בוב הוא לקוי ראיה המשתמש
בקורא מסך.

00:05:44.010 --> 00:05:47.910
הוא רצה להפתיע את
אשתו האהובה, שרה, ביום השנה שלהם

00:05:49.430 --> 00:05:51.710
ולהעניק לה במתנה כמה
פריטים מותאמים אישית.

00:05:54.490 --> 00:05:59.900
בהתרגשות רבה הוא פתח
את האתר כדי לחפש מתנות.

00:05:59.900 --> 00:06:03.720
אך לצערו הרב, ברגע
שהחל לנווט באתר

00:06:03.720 --> 00:06:09.060
עם מקלדת וקורא מסך,
הומטרו עליו הודעות

00:06:09.060 --> 00:06:10.720
פתאומיות ובלתי צפויות.

00:06:12.940 --> 00:06:17.940
זה השאיר אותו מבולבל וקטע
את זרימת קורא המסך שלו.

00:06:17.940 --> 00:06:23.030
הוא בקושי הצליח להתמקד בתוכן
בין כל ההפרעות הבלתי פוסקות.

00:06:23.030 --> 00:06:25.240
תיעדתי את החוויה שלו בסרטון.

00:06:26.600 --> 00:06:31.130
הסרטון מציג משתמש המשתמש בקורא
המסך NVDA עם מקלדת

00:06:32.340 --> 00:06:35.890
ובחלונית המרחפת מוצג הטקסט
שמוקרא על ידי קורא המסך

00:06:35.890 --> 00:06:36.890
בסדר ליניארי.

00:06:39.010 --> 00:06:40.640
אז בואו נקשיב
יחד לאודיו

00:06:40.640 --> 00:06:43.250
כדי להבין טוב יותר את החוויה של בוב

00:06:45.212 --> 00:07:38.637
[קול קורא מסך]

00:07:40.633 --> 00:07:41.602
נשמע מעצבן.

00:07:43.567 --> 00:07:46.349
אז מה קרה
לחיפוש המתנות של בוב?

00:07:46.350 --> 00:07:49.730
לאחר כמה דקות מאבק
הוא סגר את האתר

00:07:49.730 --> 00:07:51.890
וויתר על הרעיון לקנות
לאשתו מתנות באינטרנט.

00:07:52.990 --> 00:07:55.200
מה הייתה הסיבה לכך?

00:07:55.200 --> 00:07:58.340
זה קרה עקב שימוש שגוי
בתכונת aria-live="polite"

00:07:58.340 --> 00:08:01.480
בקרוסלת תמונות אוטומאטיות.

00:08:01.480 --> 00:08:04.410
נדון בזה מאוחר יותר, אבל כרגע,

00:08:04.410 --> 00:08:08.010
המתכנת השתמש ב-ARIA מתוך מחשבה

00:08:08.010 --> 00:08:11.420
שזה יעזור למשתמשים,
למשתמשי קורא המסך.

00:08:11.420 --> 00:08:12.870
אבל מה קרה במציאות?

00:08:12.870 --> 00:08:15.930
במציאות, זה פגע קשות
בחוויית המשתמשים.

00:08:15.930 --> 00:08:20.040
אז זה מה שקורה כאשר
אתרים בנויים עם ARIA לקוי.

00:08:22.830 --> 00:08:25.300
הנסיון של בוב לימד אותנו

00:08:25.300 --> 00:08:28.140
שבמקום לסייע למשתמשי טכנולוגיה מסייעת,

00:08:28.141 --> 00:08:30.590
שימוש שגוי ב-ARIA
מציב בפניהם מכשולים.

00:08:31.020 --> 00:08:33.460
זה מטעה ומשאיר
את המשתמשים מתוסכלים,

00:08:33.460 --> 00:08:36.100
לפעמים מעלה
בהם ציפיות שווא.

00:08:36.100 --> 00:08:38.590
זה חוצץ ביניהם לבין
חוויות דיגיטליות מלאות.

00:08:39.650 --> 00:08:43.730
וחוויות כאלה עשויות לגרום למשתמשים
לנטוש באמצע הדרך

00:08:43.730 --> 00:08:46.310
או להסתמך על אחרים
כדי להשלים את משימתם.

00:08:46.310 --> 00:08:47.740
זה מביס את מטרת ה-ARIA.

00:08:50.580 --> 00:08:52.650
אז בואו נדבר על מה זה תקן ARIA.

00:08:52.650 --> 00:08:55.960
כי זה חיוני להבין
אותו ולהשתמש בו בחוכמה.

00:08:56.990 --> 00:08:59.500
בעת המודרנית,
דפי האינטרנט מתנהגים

00:08:59.500 --> 00:09:02.810
יותר כמו אפליקציות
אינטרנט מוּעשרות.

00:09:02.810 --> 00:09:06.010
יש להם ממשקי משתמש עשירים,
ממשקי משתמש מתקדמים,

00:09:06.010 --> 00:09:07.330
ותוכן דינמי.

00:09:08.600 --> 00:09:12.610
למרבה הצער, ב-HTML אין
את כל הסמנטיקה האנגלית

00:09:12.610 --> 00:09:17.310
כדי להעביר את הסמנטיקה של כל
האלמנטים העשירים האלה, כמו טאבים,

00:09:17.310 --> 00:09:19.970
רשימות טאבים, pre-menu וכו'.

00:09:19.970 --> 00:09:22.270
משתמשים רואים יכולים להבחין
באלמנטים האלה באמצעות

00:09:22.270 --> 00:09:24.950
דפוסי עיצוב חזותיים.

00:09:24.950 --> 00:09:27.440
אך ללא סמנטיקה,
המשתמשים שנעזרים (בקוראי מסך)

00:09:27.440 --> 00:09:30.300
אולי לא ידעו על אודות
השימושיות וההתנהגות המלאות

00:09:30.300 --> 00:09:31.720
של אלמנטים אלה.

00:09:31.720 --> 00:09:33.970
אז כאן תקן ARIA פועל כגשר
מעל הפער הזה.

00:09:35.950 --> 00:09:37.509
Web accessibility initiative,

00:09:37.510 --> 00:09:39.660
Accessible Rich
Internet Applications,

00:09:39.660 --> 00:09:43.230
או WAI-ARIA,
או בקיצור - ARIA

00:09:43.230 --> 00:09:45.800
ARIA הוא מפרט של W3C.

00:09:45.800 --> 00:09:50.150
הוא כולל סדרת תפקידים
ותכונות שמתכנתים יכולים להוסיף

00:09:50.150 --> 00:09:54.540
ל-HTML כדי לשפר את
נגישות התוכן

00:09:54.540 --> 00:09:59.220
והיישומיות למשתמשים המשתמשים
בטכנולוגיות מסייעות,

00:09:59.220 --> 00:10:00.220
בעיקר בקוראי מסך.

00:10:02.950 --> 00:10:06.910
נניח שאתם קוראים ספר
ומישהו הוסיף הערות קטנות

00:10:06.910 --> 00:10:08.830
כדי לעזור לכם להבין
את הסיפור טוב יותר.

00:10:08.830 --> 00:10:11.420
אז במילים פשוטות - ARIA
הוא כמו ההערות האלה.

00:10:11.420 --> 00:10:15.620
הכוח של ARIA הוא עצום.

00:10:15.620 --> 00:10:17.220
יש בו הרבה תכונות.

00:10:18.610 --> 00:10:21.120
יש לנו זמן מוגבל,
אז נתמקד בכמה מהם היום.

00:10:22.160 --> 00:10:23.160
אכן.

00:10:23.700 --> 00:10:29.520
אז, ARIA עוזר למתכנתים לתאר
את סוג הווידג'טים בעזרת

00:10:29.520 --> 00:10:32.540
תפקידים כגון רשימות טאבים,
טאבים, תפריט, עץ וכו'.

00:10:33.800 --> 00:10:37.570
הם יכולים להגדיר מצב בעזרת
תכונות כמו aria-selected,

00:10:37.570 --> 00:10:39.090
aria-controls וכו'.

00:10:42.260 --> 00:10:45.060
הם יכולים להגדיר מערכות יחסים
בין אלמנטים עם aria-owns,

00:10:45.060 --> 00:10:46.140
aria-controls וכו'.

00:10:47.710 --> 00:10:50.990
מתכנתים יכולים לספק
שמות נגישים באמצעות aria-label

00:10:50.990 --> 00:10:52.510
או aria-labelledby.

00:10:52.510 --> 00:10:54.730
הם יכולים לספק תיאור נגיש בעזרת

00:10:54.730 --> 00:10:58.060
שימוש ב-aria-describedby בכפתורים.

00:10:58.060 --> 00:11:01.107
כדי להעביר את
השינויים הדינמיים בתוכן,

00:11:01.108 --> 00:11:03.450
מתכנתים יכולים להשתמש ב-ARIA live regions.

00:11:03.450 --> 00:11:07.010
לדוגמה: הודעות הצלחה,
הודעות שגיאה, אזהרות,

00:11:07.010 --> 00:11:08.390
או עדכוני תוצאות ספורט וכו'.

00:11:10.050 --> 00:11:13.110
הם יכולים להשתמש ב-aria-hidden
 כדי להסתיר תוכן לא רלוונטי.

00:11:14.350 --> 00:11:18.710
כעת הגענו לשאלה: כיצד ARIA
מסייע לטכנולוגיות מסייעות?

00:11:21.510 --> 00:11:25.560
ARIA עוזר בהוספת
role, name, state וכו',

00:11:25.560 --> 00:11:29.270
לעץ הנגישות שנוצר
ממודל אובייקט המסמך (DOM).

00:11:31.340 --> 00:11:34.800
בתורו, זה עוזר ל-API של הנגישות להעביר את המידע הזה

00:11:34.800 --> 00:11:36.150
לטכנולוגיות המסייעות.

00:11:40.360 --> 00:11:42.050
עכשיו שאנחנו יודעים מה ARIA
יכול לעשות,

00:11:43.470 --> 00:11:45.660
בואו נבין גם
מה ARIA לא יכול לעשות.

00:11:47.120 --> 00:11:49.120
ARIA לא מאפשר הוספת
התנהגות לאלמנט.

00:11:50.390 --> 00:11:52.940
אינו מאפשר לשנות את
הנראות של האלמנט,

00:11:52.940 --> 00:11:57.130
וגם אינו מאפשר הוספת פוקוס,
או פונקציונליות של מקלדת

00:11:57.130 --> 00:11:58.460
לאלמנטים.

00:11:59.500 --> 00:12:03.667
כדי להוסיף תכונות אלו,
על המתכנת להשתמש בסקריפטים וב-CSS.

00:12:05.100 --> 00:12:07.133
לשימוש מיטבי ב-ARIA,

00:12:07.133 --> 00:12:10.820
על המתכנתים לפעול על פי
חמשת כללי ה-ARIA.

00:12:10.820 --> 00:12:12.360
אז מה הם?

00:12:12.360 --> 00:12:15.050
בואו נסקור אותם אחד-אחד.

00:12:15.050 --> 00:12:20.130
כלל ראשון אומר, אל תשתמשו ב-ARIA אם
אותה הסמנטיקה זמינה ב-HTML.

00:12:20.130 --> 00:12:24.250
אם אתם צריכים ליצור
checkbox, השתמשו ב-input הבסיסי

00:12:24.250 --> 00:12:28.650
עם type="checkbox", במקום
ב-role="checkbox"

00:12:28.650 --> 00:12:29.650
ב-div.

00:12:33.130 --> 00:12:36.170
למרבית האלמנטים של HTML יש
סמנטיקה מובנית שהם מעבירים

00:12:36.170 --> 00:12:38.100
לקוראי המסך.

00:12:38.100 --> 00:12:40.750
הכלל השני אומר,
אל תשנו את הגדרות האלמנטים (בעזרת ARIA)

00:12:40.750 --> 00:12:41.780
אלא אם אתם ממש חייבים.

00:12:42.970 --> 00:12:47.050
כי ARIA עשוי לשנות את
הסמנטיקה ואת המשמעויות

00:12:47.050 --> 00:12:48.310
עבור משתמשי קורא המסך.

00:12:49.930 --> 00:12:52.653
כלל שלישי אומר, שכל האלמנטים האינטראקטיביים חייבים להיות שמישים

00:12:52.654 --> 00:12:53.560
באמצעות מקלדת.

00:12:53.560 --> 00:12:55.280
מה זה אומר?

00:12:55.280 --> 00:12:57.220
ARIA roles מוסיפים רק סמנטיקה.

00:12:57.220 --> 00:13:02.290
האחריות להפיכתם לברי ניווט
ותפעול מונחת על המתכנת.

00:13:02.290 --> 00:13:05.420
אז אם אתם מוסיפים לאלמנט
role="button"

00:13:05.420 --> 00:13:08.440
עליכם לאפשר למשתמשים
ניווט באמצעות המקלדת.

00:13:08.440 --> 00:13:12.800
והמשתמשים אמור להיות מסוגלים
להפעיל אותו בעזרת

00:13:12.800 --> 00:13:14.750
מקש ה-Enter ומקש
הרווח ב-Windows.

00:13:16.720 --> 00:13:20.500
הכלל הרביעי אומר, אל
תשמשו ב-role="presentation"

00:13:20.500 --> 00:13:23.020
או ב-aria-hidden="true"
על אלמנטים שדורשים ניווט.

00:13:24.480 --> 00:13:27.392
כיוון ששימוש באחד מאלה יגרום

00:13:27.393 --> 00:13:29.680
לכך שהמשתמש ינווט לשום מקום.

00:13:34.740 --> 00:13:38.970
שמות נגישים הם השם או הטקסט

00:13:38.970 --> 00:13:42.360
המשמש טכנולוגיות מסייעות
לזיהוי האלמנט.

00:13:42.360 --> 00:13:45.286
אז הכלל חמישי אומר
שכל הרכיבים האינטראקטיביים חייבים

00:13:45.287 --> 00:13:46.370
להיות בעלי שם נגיש.

00:13:47.930 --> 00:13:51.920
אם המתכנתים אינם פועלים לפי הכללים האלה, ARIA מביא יותר נזק מתועלת.

00:13:51.920 --> 00:13:56.440
נהוג לומר: עדיף לא להשתמש ב-ARIA
מאשר לעשות שימוש שגוי ב-ARIA.

00:13:58.250 --> 00:14:02.432
אסביר זאת בעזרת דוגמה מעניינת

00:14:02.433 --> 00:14:04.440
מניסיון אישי.

00:14:05.480 --> 00:14:10.180
בואו נבחן זאת
באמצעות מחוון עוצמת הקול.

00:14:10.180 --> 00:14:13.190
זוהי בקרת מחוון עוצמת הקול שנוצרה

00:14:13.190 --> 00:14:17.880
עם אלמנט
input type="range"

00:14:17.880 --> 00:14:25.880
המתכנת השתמש באלמנט label (תווית)
כדי לקשור אותו למחוון,

00:14:26.310 --> 00:14:28.010
עם תכונת id .

00:14:28.010 --> 00:14:33.120
עוד הוסיף המתכנת לבקרת
עוצמת הקול אלמנט תווית

00:14:33.120 --> 00:14:35.770
עם aria-label="volume control”
ו-aria-hidden="true״.

00:14:35.770 --> 00:14:39.630
אני חוזרת: המתכנת
הוסיף לאלמנט התווית

00:14:39.630 --> 00:14:42.910
גם aria-label="volume control”
וגם aria-hidden="true״

00:14:45.150 --> 00:14:48.260
עכשיו קחו כמה רגעים וספרו
לי בצ'אט

00:14:48.260 --> 00:14:50.220
מה יהיה השם הנגיש של המחוון?

00:14:56.040 --> 00:14:59.640
למרבה הצער, לא יהיה
שם נגיש עבור המחוון

00:14:59.640 --> 00:15:04.630
ומשתמשי קורא המסך
לא ישמעו שום שם,

00:15:04.630 --> 00:15:06.830
והם לא יידעו מה
מטרת האלמנט.

00:15:08.350 --> 00:15:09.350
אז מה השתבש?

00:15:10.390 --> 00:15:12.890
השימוש ב-aria-hidden="true
באלמנט התווית

00:15:14.570 --> 00:15:18.080
הסתיר גם את
התווית הגלויה וגם את ה-aria-abel

00:15:18.080 --> 00:15:22.340
אז קוראי מסך לא יודעים
מה מטרת האלמנט.

00:15:22.340 --> 00:15:28.900
המתכנת הוסיף תכונות
ARIA מיותרות לאלמנטים,

00:15:28.900 --> 00:15:32.850
שלא לצורך, מבלי
להבין אותן כראוי,

00:15:32.850 --> 00:15:36.800
ובסופו של דבר יצר
ממשקים בלתי נגישים.

00:15:36.800 --> 00:15:38.760
בקיצור, השימוש פה ב-ARIA
לא משרתת שום מטרה

00:15:38.760 --> 00:15:41.490
כי אלמנט התווית
לבדו היה מספיק

00:15:41.490 --> 00:15:42.640
כדי להעניק לאלמנט שם נגיש.

00:15:44.040 --> 00:15:47.370
השורה התחתונה היא, השתמשו
ב-ARIA אך ורק כאשר

00:15:47.370 --> 00:15:48.770
זה משפר את הנגישות.

00:15:50.290 --> 00:15:51.670
עדיף לא להשתמש ב-ARIA
מאשר לעשות שימוש שגוי ב-ARIA.

00:15:52.800 --> 00:15:54.820
בואו נעבור
לדוגמה אחרת, של אמילי.

00:15:56.820 --> 00:15:59.680
אמילי משתמשת בשליטה קולית,

00:15:59.680 --> 00:16:04.120
לאחר שאיבדה את גפיה בתאונה קשה.

00:16:04.120 --> 00:16:07.100
אז היא משתמשת בפקודות קוליות
כדי ליצור אינטראקציה עם העולם הדיגיטלי.

00:16:08.250 --> 00:16:10.970
היא מאוד אוהבת לקרוא ספרים.

00:16:12.480 --> 00:16:14.690
היא רוצה לעקוב אחר
הסופרת האהובה עליה בפייסבוק.

00:16:15.720 --> 00:16:20.230
הקישור הגלוי באתר האינטרנט של הסופרת הוא Follow me on Facebook.

00:16:22.080 --> 00:16:26.210
אם הייתם במקום אמילי, איזו
פקודה קולית הייתם נותנים

00:16:26.210 --> 00:16:27.210
כדי לגשת לקישור?

00:16:28.560 --> 00:16:29.700
ספרו לי בצ'אט.

00:16:35.080 --> 00:16:40.820
אני בטוחה שכולכם השתמשתם ב-
"לחץ על

00:16:40.820 --> 00:16:41.910
״follow me on Facebook

00:16:41.910 --> 00:16:44.980
אמילי ניסתה את אותו דבר,
אבל זה לא עבד.

00:16:47.100 --> 00:16:49.223
כי המתכנת השתמש ב-

00:16:49.224 --> 00:16:50.450
ב-aria-label="opens in new window"

00:16:51.700 --> 00:16:55.950
כדי לעזור למשתמשי קוראי מסך
ולהסביר את התנהגות הקישור

00:16:55.950 --> 00:16:58.290
קרי - שהוא ייפתח בחלון חדש.

00:16:58.290 --> 00:17:04.520
אך למרבה הצער, הוא לא ידע
שהטקסט המקורי בתוך הקישור

00:17:04.520 --> 00:17:06.180
יידרס על ידי aria-label.

00:17:07.730 --> 00:17:10.720
ואי ההתאמה בין
התווית הגלויה ל-aria-label

00:17:10.720 --> 00:17:13.710
או השם נגיש יעמיד
אתגרים בפני המשתמשים.

00:17:17.250 --> 00:17:20.360
דרך נכונה אחת היא להוסיף
בתוך טקסט הקישור עצמו

00:17:20.360 --> 00:17:23.080
את הטקסט המיידע: הקישור יפתח בחלון חדש.

00:17:23.080 --> 00:17:24.120
זה יעזור למשתמשים.

00:17:26.030 --> 00:17:29.350
כעת, איך מפתחים יכולים להימנע
מטעויות אלו ולהשתמש ב-ARIA נכון?

00:17:30.720 --> 00:17:33.600
הבה נפצח את כל המושגים של ARIA
אחד אחרי השני

00:17:33.600 --> 00:17:34.730
כדי לדעת כיצד להשתמש בהם נכון.

00:17:43.820 --> 00:17:46.650
ראשית, בואו נסקור את
הדרכים המובילות להענקת שמות נגישים

00:17:46.650 --> 00:17:47.650
באמצעות ARIA.

00:17:48.860 --> 00:17:52.750
זכרו תמיד:
ARIA תמיד מקבל עדיפות

00:17:52.750 --> 00:17:54.580
על קוד HTML מקורי.

00:17:54.580 --> 00:17:55.640
אז השתמשו בתקן בקפידה.

00:17:56.710 --> 00:18:00.650
השיטה המומלצת לשם נגיש
היא להשתמש בתווית הגלויה

00:18:02.250 --> 00:18:06.920
aria-label או aria-labelledby.
אל תעבוד על אלמנטים גנריים

00:18:06.920 --> 00:18:09.580
אם הם לא מקבלים תפקידים מתאימים.

00:18:09.580 --> 00:18:12.940
אז נניח שיש לכם תווית
aria="cookie banner"

00:18:14.360 --> 00:18:16.950
ברכיב div,
ואתם שוכחים להגדיר את התפקיד,

00:18:18.020 --> 00:18:22.690
כך שקורא המסך לא יקרא
את התווית cookie banner.

00:18:24.120 --> 00:18:28.470
תמיד קחו את זה בחשבון
כשאתם נותנים שמות נגישים.

00:18:30.300 --> 00:18:35.630
ישנן עוד דרכים מלבד ARIA
לספק שמות נגישים

00:18:37.110 --> 00:18:42.260
נניח שאתם רוצה להוסיף
שם נגיש לכפתור או לקישור,

00:18:42.260 --> 00:18:46.270
אתם יכול לשים טקסט בתוך הקישור
או הכפתור,

00:18:46.270 --> 00:18:50.950
להוסיף alt לתמונות, או
להשתמש בתכונת id

00:18:50.950 --> 00:18:53.870
כדי לקשור בין אלמנט
התווית לשדות הטופס.

00:18:53.870 --> 00:18:57.800
אבל אם אתם חושבים ש-ARIA זה
הפתרון הנכון, מה עליכם לעשות?

00:18:57.800 --> 00:18:59.614
אם אתה חושבים ש-ARIA הוא
הפתרון הנכון

00:18:59.615 --> 00:19:01.020
כדי להעניק שם נגיש,

00:19:01.020 --> 00:19:03.790
בדקו אם הטקסט כבר
קיים במסמך,

00:19:03.790 --> 00:19:05.740
ולאחר מכן השתמשו ב-aria-labelledby.

00:19:05.740 --> 00:19:08.150
אם הטקסט לא קיים במסמך,

00:19:08.150 --> 00:19:09.420
אז אתם יכולים להשתמש ב-aria-label.

00:19:11.250 --> 00:19:14.530
נקודה נוספת שיש לקחת בחשבון היא:
aria-describedby נועד

00:19:14.530 --> 00:19:16.480
לספק תיאור נגיש,

00:19:16.480 --> 00:19:18.340
לא למתן שמות נגישים.

00:19:20.590 --> 00:19:23.690
לדוגמה, כדי לקשר בקוד בין
תיאור השגיאה

00:19:23.690 --> 00:19:25.050
לשדה הטופס המתאים.

00:19:26.500 --> 00:19:29.420
מפתחים לפעמים מתבלבלים בין aria-describedby 

00:19:29.420 --> 00:19:30.420
ו-aria-labelledby

00:19:32.050 --> 00:19:33.890
אז תמיד תזכרו
את הנקודות האלה.

00:19:36.410 --> 00:19:40.370
עכשיו, השקף הבא מכסה תפקידים
הדורשים תכונת parent/child,

00:19:40.370 --> 00:19:41.570
או יחסי parent/child.

00:19:42.890 --> 00:19:46.690
ישנם אלמנטים מסוימים הדורשים
יחסי parent/child מסוימים

00:19:46.690 --> 00:19:51.320
כגון tablist-tab, או
listbox-option, radiogroup-radio, או

00:19:51.320 --> 00:19:54.410
 menu-menuitem/menuitemradiocheck/ menuitemradiochec-box וכו׳.

00:19:55.810 --> 00:19:58.125
קביעת יחסי parent/child ברורים

00:19:58.126 --> 00:20:00.700
מקל את הניווט על
משתמשי קורא המסך

00:20:00.700 --> 00:20:03.870
כיוון שהיחסים מוגדרים נכונה.

00:20:05.670 --> 00:20:08.290
אז אם היחסים
מוגדרים כראוי,

00:20:09.510 --> 00:20:11.950
קורא המסך יעביר
את המידע

00:20:11.950 --> 00:20:15.650
למשתמש כמו מיקום פריט
רשימה או תפריט,

00:20:15.650 --> 00:20:18.260
או רמת הפריט בהיררכיית העץ.

00:20:20.950 --> 00:20:25.670
אחרים מספקים
תפקיד parent ברכיב ה-parent,

00:20:25.670 --> 00:20:29.300
והם שוכחים להגדיר...
הם מספקים אלמנט parent,

00:20:29.300 --> 00:20:32.470
תפקיד parent,
אבל ישכחו להגדיר את תפקיד ה-child.

00:20:32.470 --> 00:20:35.620
ולפעמים הם מספקים תפקיד child
ושוכחים להגדיר את תפקיד ה-parent.

00:20:37.050 --> 00:20:40.400
לדוגמה, הם מכניסים role="menu"
ברכיב ה-parent,

00:20:40.400 --> 00:20:43.650
אבל ישכחו להגדיר
role="menuitemradio"

00:20:43.650 --> 00:20:47.950
או menuitemcheckbox
ברכיב הצאצא.

00:20:47.950 --> 00:20:52.640
באופן דומה, הם יכללו "role="tab
ברכיב ה-child

00:20:52.640 --> 00:20:56.040
אבל ישכחו להגדיר ברכיב ה-parent
"role="tablist

00:20:57.690 --> 00:21:00.100
יכול להיות מצב שבו שילוב

00:21:00.100 --> 00:21:05.230
בין קורא מסך לדפדפן יעביר את המידע,
אך ייתכן שאחרים לא,

00:21:05.230 --> 00:21:07.100
אז דאגו לפתרונות אמינים.

00:21:08.500 --> 00:21:12.300
אי הגדרת  יחסי parent/child ברורים
תשאיר את המשתמש עם הקשר חלקי.

00:21:13.610 --> 00:21:17.040
אז נשאלת השאלה, איך
תוכלו  לבדוק את הקשרים האלה?

00:21:17.040 --> 00:21:21.870
כדי למצוא את הבעיות הקשורות
ליחסי parent/child,

00:21:21.870 --> 00:21:24.490
אתם יכולים לבדוק
את הקוד באופן ידני,

00:21:24.490 --> 00:21:27.320
להשתמש בלינטרים
לנגישות בזמן כתיבת הקוד,

00:21:27.320 --> 00:21:31.760
או להשתמש
בכלי בדיקה אוטומטיים כמו axe DevTools וכו'.

00:21:35.010 --> 00:21:38.660
באופן דומה, ישנם כמה תפקידים
עם תכונות מסוימות של ARIA.

00:21:40.730 --> 00:21:43.990
ישנם תפקידים מסוימים
הדורשים תכונות ARIA משויכות

00:21:43.990 --> 00:21:44.770
איתם.

00:21:44.770 --> 00:21:47.490
לדוגמה "role="heading
צריך להיות משויך

00:21:47.490 --> 00:21:49.600
ל-aria-level המתאים

00:21:49.601 --> 00:21:54.210
role="chechbox" צריך להיות משויך
ל-aria-checked.

00:21:54.210 --> 00:21:57.690
role="slider" צריך להיות משויך
ל-aria-valuenow

00:21:57.690 --> 00:22:01.250
ללא השיוכים הללו, הם
לא יעבירו את הסמנטיקה הנכונה

00:22:01.250 --> 00:22:02.760
למשתמשי קורא המסך.

00:22:04.010 --> 00:22:06.440
אך לעתים קרובות מתכנתים
שוכחים לעשות זאת.

00:22:07.640 --> 00:22:10.400
נניח שאתה משתמש ב-role="heading"
ברכיב div,

00:22:11.930 --> 00:22:15.810
ולא סיפקת את תכונת
ה-aria-label הנכונה

00:22:15.810 --> 00:22:18.430
אז ייתכן שקורא המסך
לא יעביר את התווית המדויקת

00:22:18.430 --> 00:22:20.310
שצריך להעביר
עבור האלמנט.

00:22:22.070 --> 00:22:25.650
אז תמיד בדקו
במפרט ה-ARIA העדכני ביותר

00:22:25.650 --> 00:22:27.260
בשיוך התפקידים והתכונות.

00:22:30.670 --> 00:22:32.930
התכונה האחרת שבה נעשה שימוש לא נכון
היא ARIA live-region

00:22:35.760 --> 00:22:39.290
התכנים הדינמיים המשתנים,
אינם ניתנים למיקוד.

00:22:39.290 --> 00:22:42.610
הם לא מקבלים מיקוד ואינם
ברורים למשתמשי קוראי מסך.

00:22:44.530 --> 00:22:48.720
לדוגמה, הודעות אזהרה,
הודעות הצלחה, עדכוני סטטוס

00:22:48.720 --> 00:22:53.720
או עדכוני ניקוד וכו'.

00:22:53.720 --> 00:22:57.030
האזור זה צריך להיות מסומן
עם ARIA live-region.

00:22:57.030 --> 00:22:58.777
אז כמה נקודות מפתח שכדאי לקחת בחשבון

00:22:58.778 --> 00:23:01.280
בעת שימוש ב-ARIA live-region:
role="alert" צריך להיות בשימוש

00:23:01.280 --> 00:23:04.970
כדי להתריע על מידע חשוב
או מוגבל בזמן.

00:23:04.970 --> 00:23:07.140
בעוד שיש להשתמש
ואילו השימוש ב-"aria-live="polite

00:23:07.140 --> 00:23:09.200
הוא עבור עדכונים או
הודעות שאינן דחופות.

00:23:11.410 --> 00:23:14.130
לפעמים מפתחים משתמשים בטעות
ב-role="alert"

00:23:14.130 --> 00:23:17.230
או ב-aria-live="assertive"
בהודעה בעדיפות נמוכה;

00:23:17.230 --> 00:23:18.230
וזה שגוי.

00:23:20.060 --> 00:23:23.820
כבר ראינו שימוש שגוי אחד
ב-"aria-live="polite

00:23:23.820 --> 00:23:26.052
בדוגמה שלנו עם הקרוסלה האוטומאטית

00:23:26.053 --> 00:23:27.940
במקרה של בוב.

00:23:29.980 --> 00:23:34.990
אז עבור קרוסלות מסתובבות אוטומטיות,
יש להשתמש ב-"aria-live="off

00:23:34.990 --> 00:23:36.370
כדי לשנמך את ההודעות.

00:23:38.940 --> 00:23:43.460
אם ברצונכם שכלל האזורים
ב-ARIA live-region יקראו

00:23:43.460 --> 00:23:47.340
על ידי קורא המסך, אז עליכם
להשתמש ב-aria-atomic="true"

00:23:47.340 --> 00:23:48.550
עם aria-live.

00:23:49.880 --> 00:23:52.800
כי ברירת המחדל
של aria-atomic היא false.

00:23:54.860 --> 00:24:00.440
לפעמים המתכנת מוסיף
ARIA live-regions בעדכון התוכן עצמו.

00:24:00.440 --> 00:24:01.430
זה לא עובד.

00:24:01.430 --> 00:24:01.890
למה?

00:24:01.890 --> 00:24:04.190
מכיוון ש-aria-live
נכנס לתמונה

00:24:04.190 --> 00:24:08.780
רק כאשר התוכן משתנה,
לא בטעינה הראשונית.

00:24:09.980 --> 00:24:14.080
אז האלמנט עם ה-aria-live חייב
להיות נוכח במבנה ה-DOM

00:24:14.080 --> 00:24:17.930
בעת טעינת העמוד כך
שקורא המסך יוכל לקלוט אותו ולנטר

00:24:17.930 --> 00:24:18.930
לשינויים.

00:24:22.420 --> 00:24:24.150
כעת נעבור לתפקידים.

00:24:25.180 --> 00:24:26.930
תפקידי ה-ARIA קובעים כמה ציפיות.

00:24:26.930 --> 00:24:28.390
אז בחירת ה-role חשובה מאוד.

00:24:30.280 --> 00:24:32.666
התפקידים menubar ו-menu

00:24:32.667 --> 00:24:34.150
מתאימים לרשימת אפשרויות.

00:24:34.150 --> 00:24:38.120
הם דומים לתפריט
בדסקטופ של אפליקציה.

00:24:38.120 --> 00:24:42.130
לדוגמה, כדי לספק רשימה של
פעולות או פונקציות, כמו הוספה,

00:24:42.130 --> 00:24:43.380
עריכה, שמירה וכו'.

00:24:45.080 --> 00:24:47.950
אם תיצור ניווט באתר
בעזרת role="menubar"

00:24:47.950 --> 00:24:50.290
משתמשי קורא המסך יצפו

00:24:50.290 --> 00:24:55.390
להיות מסוגלים לנווט בתפריט
ובתפריטי המשנה

00:24:55.390 --> 00:24:56.940
בעזרת מקשי החצים.

00:24:58.070 --> 00:25:02.210
אבל כשזה לא קורה,
הם מרגישים מבולבלים ואבודים.

00:25:03.490 --> 00:25:06.460
אז יש להשתמש ב-Disclosure Pattern
עבור ניווט אפיני באתר

00:25:06.460 --> 00:25:09.280
עם קבוצת קישורים הניתנת להרחבה.

00:25:11.760 --> 00:25:14.940
באופן דומה, גם ב-role="presentation"
נעשה שימוש שגוי.

00:25:16.410 --> 00:25:18.770
בניגוד לשמועות,
role="presentation"

00:25:18.770 --> 00:25:22.510
אינו מסתיר תוכן מקוראי מסך

00:25:22.510 --> 00:25:23.520
או מטכנולוגיות מסייעות.

00:25:24.950 --> 00:25:29.030
זה רק מסיר סמנטיקה מרומזת
של ARIA מחשיפה

00:25:29.030 --> 00:25:30.160
לעץ הנגישות.

00:25:32.170 --> 00:25:34.560
התוכן של הרכיב עדיין זמין

00:25:34.560 --> 00:25:36.490
לטכנולוגיות המסייעות.

00:25:36.490 --> 00:25:38.650
תפקידים לפעמים משמשים להסוואה.

00:25:38.650 --> 00:25:39.720
בחרו אותם בחוכמה.

00:25:47.230 --> 00:25:50.530
כעת, בואו נדון
בשימוש שגוי בכמה תכונות של ARIA.

00:25:55.350 --> 00:25:58.160
מתכנתים מבינים לא נכון
מספר תכונות של תקן ARIA.

00:25:58.160 --> 00:26:01.460
הם לא מצליחים למצוא את
ההבדל בין המצבים

00:26:01.460 --> 00:26:02.680
נבחר, סומן ונלחץ.

00:26:06.560 --> 00:26:11.390
לפעמים הם משתמשים ב-ARIA select
כדי לדמות כפתורי מצב

00:26:11.390 --> 00:26:13.540
או לאותת לסימון שבוצע
ב-check-box.

00:26:16.040 --> 00:26:18.560
אבל עבור כפתורי מצב,
יש להשתמש ב-aria-press.

00:26:19.650 --> 00:26:21.770
ולגבי check-box,
או כפתורי רדיו,

00:26:21.770 --> 00:26:23.590
aria-check היא התכונה הנכונה.

00:26:24.770 --> 00:26:29.068
יש להשתמש ב-aria-selected
כדי לציין את האפשרות שנבחרה

00:26:29.069 --> 00:26:31.680
ב-listbox, ב-tab
או ב-tablist

00:26:33.850 --> 00:26:36.120
התכונה
התקן הבא שמנוצל לרעה הוא
aria-expanded

00:26:38.950 --> 00:26:42.150
ב-aria-expanded יש להשתמש
בקישורים או כפתורים

00:26:42.150 --> 00:26:45.320
שגורמים לתוכן
להתרחב או להתכווץ.

00:26:47.150 --> 00:26:49.618
אבל לעתים קרובות מה שקורה
הוא שמתכנתים משתמשים בהם

00:26:49.619 --> 00:26:50.800
על התוכן עצמו.

00:26:50.800 --> 00:26:52.880
זה השימוש השגוי ב-aria-expanded.

00:26:53.970 --> 00:26:57.810
ובאופן מפתיע, מתכנתים
משתמשים לפעמים ב-aria-expanded

00:26:57.810 --> 00:27:00.000
באלמנט האחרון בהיררכיה

00:27:02.100 --> 00:27:05.660
אז זה מעביר למשתמש
סמנטיקה שגויה.

00:27:05.660 --> 00:27:10.050
משתמשי קורא המסך
חושבים שהאלמנט האחרון

00:27:10.050 --> 00:27:12.350
ניתן להרחבה.

00:27:12.350 --> 00:27:13.710
אבל הוא לא ניתן להרחבה במציאות

00:27:15.220 --> 00:27:17.060
וזה משאיר את המשתמשים מבולבלים.

00:27:19.250 --> 00:27:22.260
אז תמיד בחרו בתשומת לב
את תכונות ה-ARIA .

00:27:25.220 --> 00:27:28.590
עד עכשיו דיברנו על מושגים
תיאורטיים רבים של תקן ARIA,

00:27:28.590 --> 00:27:32.870
אבל נגישות אמיתית
חורגת מתיאוריה והנחיות.

00:27:32.870 --> 00:27:34.400
לא ניתן להניח נגישות.

00:27:35.670 --> 00:27:38.760
זוכרים את הרמפה הפגומה
מתחילת הפגישה שלנו?

00:27:39.990 --> 00:27:43.970
אם האדריכל היה בודק את
הרמפה עם משתמשים בכיסא גלגלים,

00:27:43.970 --> 00:27:45.440
זה היה משרת
את מטרתו טוב יותר.

00:27:47.070 --> 00:27:50.480
על פני השטח הכל עשוי
להיראות בסדר ומושלם,

00:27:50.480 --> 00:27:53.630
אבל האתגרים בפועל מופיעים
רק כשבודקים אותם

00:27:53.630 --> 00:27:57.890
עם משתמשים אמיתיים, מכשירים אמיתיים
וטכנולוגיות מסייעות.

00:27:59.330 --> 00:28:03.140
כדאי גם להזכיר
שבדיקות אוטומציה לא מכסות

00:28:03.140 --> 00:28:04.440
את כל בעיות הנגישות.

00:28:06.350 --> 00:28:09.960
בואו נבין את החשיבות של
בדיקות ידניות וקוראי מסך

00:28:09.960 --> 00:28:13.200
בעזרת דוגמה אחת מניסיון אישי.

00:28:17.230 --> 00:28:21.840
מצאתי דוגמה פופולרית
ליצירת טבלאות נגישות.

00:28:21.840 --> 00:28:25.600
העתקתי את הקוד ובדקתי
אותו בדפדפן.

00:28:27.050 --> 00:28:31.000
ישנם שלושה טאבים: HTML,
CSS ו-JavaScript ברשימת הטאבים.

00:28:32.210 --> 00:28:34.830
שלושת הטאבים
פעלו מצוין מבחינה ויזואלית

00:28:34.830 --> 00:28:36.170
עד שהפעלתי את קורא המסך.

00:28:38.590 --> 00:28:41.590
בואו נבדוק את הסרטון הזה
כדי לדעת מה השתבש

00:28:41.590 --> 00:28:49.590
כאשר הפעלתי את קורא המסך.

00:28:54.030 --> 00:28:59.440
[קול קורא מסך]

00:29:06.610 --> 00:29:14.610
אז גם עם קורא מסך,
הכל עבד כשורה.

00:29:17.740 --> 00:29:20.700
אבל כאשר עברנו
לטאב השני ולטאב השלישי

00:29:20.700 --> 00:29:24.020
קורא המסך לא קרא
את התוכן של הטאב השני

00:29:24.020 --> 00:29:25.740
והטאב השלישי.

00:29:26.950 --> 00:29:34.950
כשעיינתי בקוד, הבנתי
שהמתכנת עדכן

00:29:36.380 --> 00:29:41.240
את התכונה aria-hidde בטאב הראשון

00:29:41.240 --> 00:29:44.100
אבל הוא שכח לעדכן את
הערך של תכונת ARIA

00:29:44.100 --> 00:29:48.170
שאומר aria-hidden="tru"
בטאב השני

00:29:48.170 --> 00:29:49.170
ובטאב השלישי.

00:29:50.320 --> 00:29:55.780
אז עקב שימוש שגוי ב-aria-hidde

00:29:55.780 --> 00:29:58.643
התוכן של הטאב השני והשלישי נותר
לא זמין

00:29:58.644 --> 00:29:59.990
למשתמשי קוראי מסך.

00:30:01.210 --> 00:30:04.340
דוגמה זו מדגישה את
החשיבות של בדיקה ידנית.

00:30:05.880 --> 00:30:12.190
זה הכרחי לבדוק את
הקוד שלכם עם קוראי מסך כדי לוודא

00:30:12.190 --> 00:30:14.890
יישום נכון של תקן ARIA בקוד.

00:30:16.690 --> 00:30:20.250
כאן השימוש ב-aria-hidden
הוא כפילות מיותרת

00:30:20.250 --> 00:30:23.610
זה מיותר בגלל ש-aria-hidden

00:30:23.610 --> 00:30:27.870
כבר סגר את הפינות לטאב השני והשלישי.

00:30:29.310 --> 00:30:32.830
זמן טוב להזכיר שעדיף לא להשתמש
ב-ARIA, אלא אם חייבים.

00:30:34.680 --> 00:30:38.800
כעת שכיסינו מושגי ליבה חשובים
בנוגע לכמה תכונות,

00:30:40.020 --> 00:30:42.700
בואו נתמקד בשימושיות המקלדת.

00:30:44.590 --> 00:30:47.650
אז המטרה של ARIA
היא לעזור למפתחים

00:30:47.650 --> 00:30:50.140
ליצור חוויות אינטרנט עשירות

00:30:50.140 --> 00:30:54.440
ושימושיות כמו
ביישומי תוכנה מקוריים.

00:30:54.440 --> 00:30:57.250
ביישומי תוכנה מקוריים
המשתמש בוחר

00:30:57.250 --> 00:31:00.760
ממשק משתמש או ווידג'טים

00:31:00.760 --> 00:31:03.920
ולאחר מכן משתמש במקשי החצים כדי
לנווט בתוך הווידג'ט הזה.

00:31:06.040 --> 00:31:10.170
אז כאשר מפתחים משתמשים ב-ARIA כדי
ליצור יישומי אינטרנט עשירים,

00:31:10.170 --> 00:31:13.940
עליהם לפעול לפי
מוסכמות הניווט הראשית של המקלדת.

00:31:15.160 --> 00:31:17.380
אלה קיימים בכל הפלטפורמות.

00:31:18.410 --> 00:31:21.980
אז עבור ווידג'טים מרוכבים,
טאבים צריכים להעביר את המיקוד אל הווידג'ט

00:31:21.980 --> 00:31:25.090
 והכי חשוב, מקשי החיצים צריכים לשמש

00:31:25.090 --> 00:31:29.790
כדי לנווט בתוך הווידג'טים שיש
בהם מספר פריטים שניתן להתמקד בהם,

00:31:29.790 --> 00:31:32.090
כמו listboxes, tree,
menu, grid וכו'.

00:31:34.750 --> 00:31:38.605
אם לא תעקבו אחר
מוסכמות השימושיות

00:31:38.606 --> 00:31:41.670
המשתמשים שלכם ישארו מבולבלים

00:31:41.670 --> 00:31:44.310
ורמת השימושיות תקטן באופן דרסטי.

00:31:46.750 --> 00:31:51.310
בואו נקפוץ לניהול לא תקין
של מיקוד בתוך ווידג'טים מורכבים

00:31:51.310 --> 00:31:52.770
עם aria-activedescendant

00:31:55.080 --> 00:31:58.920
יש שתי שיטות לניהול
מיקוד בתוך ווידג'טים מורכבים.

00:32:00.040 --> 00:32:03.440
הראשון הוא Roving tabindex

00:32:03.440 --> 00:32:07.290
והשני שימוש ב-aria-activedescendant
ב-ContainerElement.

00:32:09.060 --> 00:32:12.620
כל שיטה מעניקה לנו את היכולת
לנווט בתוך הווידג'ט

00:32:12.620 --> 00:32:13.620
עם מקשי החצים.

00:32:15.600 --> 00:32:17.230
נתמקד בשיטה השנייה.

00:32:18.390 --> 00:32:21.500
אז, aria-activedescendant
ב-ContainerElement

00:32:21.500 --> 00:32:26.190
אומר לקורא המסך איזה פריט
פעיל כרגע בתוך הווידג'ט.

00:32:27.750 --> 00:32:30.200
זה ממקד את התוכן
עבור משתמשי קוראי מסך.

00:32:31.300 --> 00:32:33.870
אז כאשר הערך של
aria-activedescendant משתנה,

00:32:33.870 --> 00:32:36.540
קורא המסך מקבל
אירועי שינוי מיקוד,

00:32:36.540 --> 00:32:38.960
כאילו מוקד התוכן הוזז

00:32:41.190 --> 00:32:44.330
מתכנתים מוסיפים aria-activedescendant
על ה-ContainerElement,

00:32:44.330 --> 00:32:47.640
אבל שוכחים לעדכן אותו דינמית

00:32:47.640 --> 00:32:53.470
לטובת ניווט המשתמש באמצעות
מקשי ניווט כמו מקשי חצים למעלה או למטה.

00:32:54.620 --> 00:32:57.310
אז כאן, כפי שאנו יכולים לראות בתפריט
המשולב שלנו, למשל,

00:32:57.310 --> 00:32:59.277
כדי לבחור פריט מזון מועדף,

00:32:59.278 --> 00:33:02.070
הפריט הפעיל והנראה כרגע

00:33:02.070 --> 00:33:04.240
הוא המבורגר, האפשרות שלישית.

00:33:05.790 --> 00:33:07.610
אבל הערך של aria-activedescendant

00:33:07.610 --> 00:33:13.290
ב-ContainerElement אומר
שזה 1, שזו פיצה.

00:33:13.290 --> 00:33:14.600
אז זה לא עודכן.

00:33:16.000 --> 00:33:19.270
אז אם המתכנת שוכח
לעדכן את הקוד באופן דינמי,

00:33:19.270 --> 00:33:22.690
המשתמש יתקשה
לבחור את הפריט הפעיל כעת

00:33:22.690 --> 00:33:26.310
והם לא יידעו
איזה פריט לבחור,

00:33:26.310 --> 00:33:28.760
כי הם לא יקבלו את המידע המלא

00:33:28.760 --> 00:33:32.230
מכיוון שקורא המסך
לא יקרא מידע זה.

00:33:33.510 --> 00:33:36.310
אז בכל פעם שאתם בוחרים
בשיטה זו למיקוד,

00:33:36.310 --> 00:33:40.690
עם aria-activedescendant על
ContainerElement - השתמשו בו בזהירות.

00:33:44.620 --> 00:33:47.920
מה נוכל לעשות כדי
לנצל בצורה הטובה ביותר את תקן ARIA?

00:33:47.920 --> 00:33:48.920
בואו נסכם.

00:33:50.610 --> 00:33:53.870
בראש ובראשונה,
לעולם אל תשתמשו ב-ARIA אלא אם כן אתם חייבים.

00:33:55.930 --> 00:34:00.330
שפרו כישוריכם עם מפרט תקן ARIA
העדכני ביותרף שהוא כרגע 1.2.

00:34:01.640 --> 00:34:05.000
והיעזרו ב-ARIA Authoring practice
guide כדי ללמוד כיצד להשתמש ב-ARIA נכון.

00:34:06.320 --> 00:34:08.270
השתמשו בלינטרים נגישים.

00:34:08.270 --> 00:34:11.271
לינטרים נגשים הם התוספים
הם התוספים

00:34:11.272 --> 00:34:14.580
שמדווחים על באגים בזמן אמת
כשאתם כותבים קוד.

00:34:16.210 --> 00:34:20.590
השתמשו בכלי בדיקה אוטומטיים
כמו axe DevTools או Wave וכו׳

00:34:20.590 --> 00:34:22.920
כשאתם מריצים
את הקוד בדפדפן.

00:34:26.620 --> 00:34:30.570
בדקו תמיד את הקוד עם
קוראי מסך עם מקלדת כמו NVDA

00:34:30.570 --> 00:34:33.770
וכנות JAWS, TalkBack,
voiceover ותוכנות דומות.

00:34:36.190 --> 00:34:39.640
תוך כדי בחירת ערכות נושא, תוספים,
רכיבים, ספריות, מסגרות פיתוח,

00:34:39.640 --> 00:34:40.640
וכו'

00:34:41.480 --> 00:34:45.500
תמיד הקפידו לבדוק
לפני השימוש

00:34:45.500 --> 00:34:46.500
את תמיכת הנגישות שהם מציעים.

00:34:47.890 --> 00:34:52.420
תעדו את השימוש ב-ARIA בקוד שלכם
כדי להקל על אחרים

00:34:52.420 --> 00:34:53.960
להבין ולתחזק
אותו טוב יותר.

00:34:56.070 --> 00:34:58.880
הדרך הטובה ביותר להבטיח
נגישות היא תמיד

00:34:58.880 --> 00:35:02.020
לכלול  בבדיקת הנגישות
משתמשי טכנולוגיה מסייעת.

00:35:04.970 --> 00:35:11.780
כאשר אנו פועלים לפי שיטות העבודה המומלצות של ARIA
ותוך שימוש בגישה פרואקטיבית,

00:35:11.780 --> 00:35:16.200
אנחנו לא רק הופכים את האתרים שלנו
לנגישים יותר, אלא גם חוסכים המון

00:35:16.200 --> 00:35:17.200
משאבים.

00:35:19.300 --> 00:35:25.990
מצד שני, יישום לקוי של ARIA
שנובע מחוסר הבנה

00:35:25.990 --> 00:35:31.160
ומבלי לבדוק אותו ביסודיות,
ואם נשחרר בחופזה קוד לא נגיש

00:35:31.160 --> 00:35:33.600
נצבור חובות נגישות.

00:35:35.220 --> 00:35:40.990
מכיוון שתיקון בעיות נגישות
בשלבים מאוחרים יותר עלול לעלות בזמן, מאמץ,

00:35:40.990 --> 00:35:41.990
ועלות כספית.

00:35:44.930 --> 00:35:52.930
אם אתה משלב
רכיבי קוד פתוח, מסגרות פיתוח, תוספים,

00:35:53.150 --> 00:35:56.680
מערכות ניהול תוכן,
או מערכות ניהול למידה,

00:35:56.680 --> 00:36:03.190
וכדומה, דמיינו את ההבדל שתעשו

00:36:03.190 --> 00:36:08.250
בטווח הארוך בחיסכון האקספוננציאלי
בעלויות, זמן ומאמצים

00:36:08.250 --> 00:36:10.400
אם תידרשו לנגישות מהיום הראשון.

00:36:12.000 --> 00:36:14.840
אז בואו נעמיד את הנגישות בראש
סדר העדיפויות, ולא במגירת ״היום שאחרי״.

00:36:14.840 --> 00:36:19.230
ואל תשאירו את זה
לספרינטים האחרונים.

00:36:21.660 --> 00:36:25.930
ולבסוף אני רוצה לומר
ARIA נוצר

00:36:25.930 --> 00:36:28.180
כדי לעזור למשתמשי טכנולוגיה מסייעת.

00:36:28.180 --> 00:36:31.440
אז אין להתייחס ל-ARIA
כאל פריט נוי,

00:36:31.440 --> 00:36:35.310
אלא ככלי רב עוצמה
להעצמת אנשים עם מוגבלויות.

00:36:37.450 --> 00:36:41.720
כדי למצות את מלוא הפוטנציאל
של ARIA, השתמש ב-ARIA בתבונה

00:36:41.720 --> 00:36:44.130
ורק כשצריך.

00:36:44.130 --> 00:36:47.420
כי שימוש לרעה ב-ARIA
גורם יותר נזק מתועלת.

00:36:50.080 --> 00:36:52.540
נגישות היא
אחריות משותפת.

00:36:52.540 --> 00:36:54.150
זה לא תפקיד של אדם אחד.

00:36:56.740 --> 00:37:00.410
אז בואו נצטרף יחד למאמצים שלנו
כדי להפוך את העולם ליותר מכיל

00:37:00.410 --> 00:37:01.500
ונגיש לכולם.

00:37:02.760 --> 00:37:03.810
כי האינטרנט מיועד לכולם.

00:37:05.300 --> 00:37:06.300
תודה.

00:37:08.410 --> 00:37:09.990
תודה שהצטרפת
אליי למפגש זה.

00:37:12.780 --> 00:37:15.420
ואם יש לך שאלות,
אתה יכול לשאול אותי דרך הצ'אט.

00:37:16.530 --> 00:37:19.240
או שתוכל להתחבר איתי
מאוחר יותר דרך הדואר שלי

00:37:19.240 --> 00:37:20.790
או קשרי מדיה חברתית.

00:37:22.540 --> 00:37:23.490
תודה לכולם.

00:37:26.967 --> 00:37:29.950
רונאק: תודה לך ראשמי
על המצגת הנפלאה.

00:37:29.950 --> 00:37:34.410
זה היה מאוד אינפורמטיבי עבורי,
גם כמפתח.

00:37:37.010 --> 00:37:41.960
יש לנו כמה שאלות ורובן
מבקשות את טקסט השקופיות.

00:37:41.960 --> 00:37:45.330
אז כן, אם תוכלי לפרסם אותו
ברגע שתהיי מוכנה

00:37:45.330 --> 00:37:48.520
ובינתיים, הבה נעבור על כמה
שאלות אחרות.

00:37:48.520 --> 00:37:53.650
אז שאלה אחת מהסרטון
אומרת, האם את חושבת שהמשפט

00:37:53.650 --> 00:37:58.430
עדיף לא להשתמש ב-ARIA, אלא אם חייבים,
עדיין נכון להיום?

00:38:01.829 --> 00:38:04.430
ראשמי: סליחה,
לא הקשבתי לך כמו שצריך.

00:38:04.430 --> 00:38:08.120
רונאק: אפשר לראות אותה ב-Q&A,
תוכלי לקרוא אותה גם כן

00:38:08.120 --> 00:38:14.050
האם את חושבת שהמשפט
עדיף לא להשתמש ב-ARIA, אלא אם חייבים,

00:38:14.050 --> 00:38:15.040
עדיין נכון להיום?

00:38:17.333 --> 00:38:19.940
ראשמי: כן,
זה תלוי בהקשר, למעשה,

00:38:19.940 --> 00:38:23.110
אם אין לכם
רכיבים דינמיים

00:38:23.110 --> 00:38:25.530
או שאין לכם
פקדים אינטראקטיביים,

00:38:25.530 --> 00:38:28.760
אז כמובן שאתם יכולים
לעשות את זה בלי ARIA.

00:38:28.760 --> 00:38:31.870
אם בדפים שלכם
יש תוכן במידה.

00:38:33.230 --> 00:38:36.840
אבל אם יש לכם ממשקים עשירים
ויש לכם בקרים אינטראקטיביים

00:38:36.840 --> 00:38:39.690
ותוכן דינמי, בהחלט
תצטרך לעבוד עם ARIA.

00:38:40.600 --> 00:38:41.070
רונאק: בסדר.

00:38:41.070 --> 00:38:43.940
ראשמי: אבל בתקופת העיצוב
אנחנו יכולים גם לבדוק

00:38:43.940 --> 00:38:47.420
באילו רכיבים עלינו להשתמש, כדי
שנוכל להשתמש בכמה שפחות ARIA.

00:38:51.433 --> 00:38:53.300
רונאק: תודה, ראשמי.

00:38:53.300 --> 00:38:54.300
שאלה נוספת.

00:38:56.250 --> 00:39:00.620
האם זה בסדר להשתמש ב-ARIA
אם alt כבר זמין?

00:39:00.620 --> 00:39:03.550
האם הם יכולים לעבוד ביחד
או שזו הגזמה?

00:39:12.718 --> 00:39:15.469
ראשמי: ובכן,
אם זה משרת את המטרה,

00:39:15.470 --> 00:39:18.060
אם אין לו
תיאור נוסף, אז זה בסדר

00:39:18.060 --> 00:39:19.740
לתת טקסט alt בלבד.

00:39:19.740 --> 00:39:23.790
אם התמונה מכילה
תוכן נוסף שצריך לתאר,

00:39:23.790 --> 00:39:28.420
אז אפשר להשתמש
בתכונת aria-describedby עם הפרטים.

00:39:31.270 --> 00:39:32.233
רונאק: תודה.

00:39:35.170 --> 00:39:38.170
שאלה מראג'ט
שלום ראשמי,

00:39:38.170 --> 00:39:41.360
האם יש תוכן דומה
זמין עבור אפליקציות מבוססות אנדרואיד?

00:39:43.267 --> 00:39:47.090
ראשמי: זה בעצם
לתמיכה ב-HTML.

00:39:47.090 --> 00:39:50.010
זה לא מיועד לאפילקציות.

00:39:50.010 --> 00:39:53.630
זה מיועד לתמיכה
בדפי אינטרנט המבוססים על HTML.

00:39:55.900 --> 00:39:56.890
רונאק: תודה.

00:39:56.890 --> 00:40:00.780
הבה נתקדם לסיום.

00:40:00.780 --> 00:40:04.300
שאלה אחרונה אליך, ראשמי.

00:40:04.300 --> 00:40:07.170
האם יש תכונת ARIA
שממש לא תשתמשי בה

00:40:07.170 --> 00:40:08.710
בגלל תמיכה לקויה?

00:40:12.333 --> 00:40:16.600
ראשמי: אני חושב שתקן
ה-Aria Graph הוצא משימוש.

00:40:16.600 --> 00:40:21.600
וב-ARIA מחפשים
תכונה אחרת

00:40:21.600 --> 00:40:23.720
כדי לשפר את הדבר הזה.

00:40:26.870 --> 00:40:31.280
רונאק: תודה לכולם על
שהשתתפתם במפגש הזה עם ראשמי.

00:40:31.280 --> 00:40:33.440
אתם יכול להמשיך
בשיחה זו בצ'אט

00:40:33.440 --> 00:40:40.250
או במדיה חברתית באמצעות ההאשטאג
WPA11Yday והאשטאג WPAD2023.

00:40:42.000 --> 00:40:45.307
נשמח אם תוכלו לבקר ב-

00:40:45.308 --> 00:40:50.000
2023.wpaccessibility.day/feedback


00:40:50.400 --> 00:40:54.420
אעביר את הקישור גם בצ'אט

00:40:54.420 --> 00:40:57.480
כדי לספק משוב אנונימי עבור
הדוברים שלנו על המצגת שלהם,

00:40:57.480 --> 00:40:59.420
ואם אתם כבר שם, אולי
תזכו בחולצה.

00:41:00.450 --> 00:41:02.861
הישארו עימנו למפגש הבא

00:41:02.862 --> 00:41:08.633
שיכלול הרצאות-בזק

00:41:08.633 --> 00:41:10.850
בזמן שאתם ממתינים, אתם מוזמנים

00:41:10.850 --> 00:41:15.520
לבקר בדפי נותני החסות שלנו,
לאסוף קצת סוואג וירטואלי,

00:41:15.520 --> 00:41:18.660
ולהיכנס לתחרות עם פרסים נהדרים.

00:41:18.660 --> 00:41:21.240
נתראה מיד אחרי ההפסקה.

00:41:21.240 --> 00:41:21.560
תודה.

00:41:22.267 --> 00:41:27.000
אמבר: תודה לנותני
החסות של יום הנגישות של WordPress 2023.

00:41:27.000 --> 00:41:29.860
חסות פלטינום: Equalize Digital.

00:41:29.860 --> 00:41:32.610
פלאגין בודק הנגישות
של Equalize Digital

00:41:32.610 --> 00:41:35.360
הוא כלי אוטומטי
לסריקת נגישות

00:41:35.360 --> 00:41:38.510
שעוזר לאתרי וורדפרס
להפוך ולהישאר נגישים.

00:41:39.810 --> 00:41:42.670
חסות פלטינום: Gravity Forms.

00:41:42.670 --> 00:41:46.280
Gravity Forms הוא בונה הטפסים המקצועי שאתם צריכים

00:41:46.280 --> 00:41:51.000
כדי ליצור טפסים חינניים,
עוצמתיים ונגישים.

00:41:51.000 --> 00:41:58.000
חסות זהב: 20i., Deque,
Empire Caption Solutions, Pressable,

00:41:58.000 --> 00:41:59.080
ו-WP Engine.

00:42:00.650 --> 00:42:07.520
חסות כסף: Code Geek, Drake
Cooper, GoDaddy, Lone Rock Point,

00:42:07.520 --> 00:42:12.740
NerdPress, Overnight Website by Kinetic Iris,Raiola Networks,


00:42:14.030 --> 00:42:17.030
A11Y Collective, ו-The Blogsmith.

00:42:18.900 --> 00:42:24.250
חסות ברונזה: AccessiCart,
GreenGeeks Web Hosting,

00:42:24.250 --> 00:42:32.250
Hall Analysis SEO Consulting,
HDC, ITX, IvyCat, Metabox,

00:42:36.070 --> 00:42:40.975
PixelChefs, Simply Schedule Appointments, SiteGround,

00:42:40.976 --> 00:42:46.170
Termageddon, Underrepresented In
Tech, Weglot ו-Yoast.